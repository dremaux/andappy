{
    "sourceFile": "src/Entity/User.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1661759032879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1661759052000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     }\r\n \r\n     public function upcoins(User $user)\r\n     {\r\n-        $conn = $this->getEntityManager()->getConnection();\r\n+        $conn = $this->getEntityManana()->getConnection();\r\n         $coins = $this->User->getcoins();\r\n         $coins = $coins + 50;\r\n \r\n         $sql = '\r\n"
                }
            ],
            "date": 1661759032879,
            "name": "Commit-0",
            "content": "<?php\r\n\r\nnamespace App\\Entity;\r\n\r\nuse Doctrine\\ORM\\Mapping as ORM;\r\nuse Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntity;\r\nuse Symfony\\Component\\Security\\Core\\User\\UserInterface;\r\nuse Symfony\\Component\\Security\\Core\\Role\\Role;\r\nuse Doctrine\\Persistence\\ObjectManager;\r\nuse Doctrine\\ORM\\Query\\ResultSetMappingBuilder;\r\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\r\n\r\n/**\r\n * @ORM\\Entity(repositoryClass=\"App\\Repository\\UserRepository\")\r\n */\r\n#[UniqueEntity(fields: ['username'], message: 'nom déjà utilisé')]\r\nclass User extends AbstractController implements UserInterface, \\Serializable\r\n{\r\n    /**\r\n     * @ORM\\Id\r\n     * @ORM\\GeneratedValue\r\n     * @ORM\\Column(type=\"integer\")\r\n     */\r\n    private $id;\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     */\r\n    private $username;\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     */\r\n    private $password;\r\n\r\n    /**\r\n     * @ORM\\Column(type=\"string\", length=255)\r\n     */\r\n    private $coins=0;\r\n\r\n    public function getId(): ?int\r\n    {\r\n        return $this->id;\r\n    }\r\n    public function getUsername(): ?string\r\n    {\r\n        return $this->username;\r\n    }\r\n    public function setUsername(string $username): self\r\n    {\r\n        $this->username = $username;\r\n\r\n        return $this;\r\n    }\r\n    public function getPassword(): ?string\r\n    {\r\n        return $this->password;\r\n    }\r\n    public function setPassword(string $password): self\r\n    {\r\n        $this->password = $password;\r\n\r\n        return $this;\r\n    }\r\n    /**\r\n     * @return (Role|string)[] The user roles\r\n     */\r\n    public function getRoles()\r\n    {\r\n        return ['ROLE_ADMIN'];\r\n    }\r\n    /**\r\n     * @return string|null The salt\r\n     */\r\n    public function getSalt()\r\n    {\r\n        return null;\r\n    }\r\n    public function eraseCredentials()\r\n    {\r\n    }\r\n    /**\r\n     * String representation of object\r\n     * @link https://php.net/manual/en/serializable.serialize.php\r\n     * @return string the string representation of the object or null\r\n     * @since 5.1.0\r\n     */\r\n    public function serialize()\r\n    {\r\n        return serialize([\r\n            $this->id,\r\n            $this->username,\r\n            $this->password\r\n        ]);\r\n    }\r\n    /**\r\n     * Constructs the object\r\n     * @link https://php.net/manual/en/serializable.unserialize.php\r\n     * @param string $serialized <p>\r\n     * The string representation of the objet\r\n     * </p>\r\n     * @return void\r\n     * @since 5.1.0     \r\n     */\r\n    public function unserialize($serialized)\r\n    {\r\n        list (\r\n            $this->id,\r\n            $this->username,\r\n            $this->password\r\n        ) = unserialize($serialized, ['allowed_classes' => false]); \r\n    }\r\n\r\n    public function getCoins(): ?string\r\n    {\r\n        return $this->coins;\r\n    }\r\n\r\n    public function setCoins(string $coins): self\r\n    {\r\n        $this->coins = $coins;\r\n\r\n        return $this;\r\n    }\r\n\r\n    public function upcoins(User $user)\r\n    {\r\n        $conn = $this->getEntityManager()->getConnection();\r\n        $coins = $this->User->getcoins();\r\n        $coins = $coins + 50;\r\n\r\n        $sql = '\r\n            UPDATE user\r\n            SET coins = '.$coins.'\r\n            WHERE username = '.$user.'\r\n        ';\r\n        $stmt = $conn->prepare($sql);\r\n        $resultSet = $stmt->executeQuery();\r\n\r\n        return $resultSet->fetchAllAssociative();\r\n    }\r\n}\r\n    \r\n?>"
        }
    ]
}